// Mocks generated by Mockito 5.4.4 from annotations
// in absence_manager/test/features/absence/application/absence_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:absence_manager/features/absence/domain/absence.dart' as _i8;
import 'package:absence_manager/features/absence/domain/i_absence_repository.dart'
    as _i2;
import 'package:absence_manager/features/absence/domain/paginated_absence_response.dart'
    as _i6;
import 'package:absence_manager/features/core/domain/failure.dart' as _i5;
import 'package:absence_manager/features/core/domain/user.dart' as _i9;
import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IAbsenceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAbsenceRepository extends _i1.Mock
    implements _i2.IAbsenceRepository {
  MockIAbsenceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.PaginatedAbsenceResponse>>
      fetchAbsencesWithMembers({
    int? page = 1,
    int? limit = 10,
    String? type,
    DateTime? date,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #fetchAbsencesWithMembers,
              [],
              {
                #page: page,
                #limit: limit,
                #type: type,
                #date: date,
              },
            ),
            returnValue: _i3.Future<
                    _i4
                    .Either<_i5.Failure, _i6.PaginatedAbsenceResponse>>.value(
                _i7.dummyValue<
                    _i4.Either<_i5.Failure, _i6.PaginatedAbsenceResponse>>(
              this,
              Invocation.method(
                #fetchAbsencesWithMembers,
                [],
                {
                  #page: page,
                  #limit: limit,
                  #type: type,
                  #date: date,
                },
              ),
            )),
          ) as _i3
              .Future<_i4.Either<_i5.Failure, _i6.PaginatedAbsenceResponse>>);

  @override
  _i3.Future<List<_i8.Absence>> readAbsences() => (super.noSuchMethod(
        Invocation.method(
          #readAbsences,
          [],
        ),
        returnValue: _i3.Future<List<_i8.Absence>>.value(<_i8.Absence>[]),
      ) as _i3.Future<List<_i8.Absence>>);

  @override
  _i3.Future<List<_i9.User>> readUsers() => (super.noSuchMethod(
        Invocation.method(
          #readUsers,
          [],
        ),
        returnValue: _i3.Future<List<_i9.User>>.value(<_i9.User>[]),
      ) as _i3.Future<List<_i9.User>>);
}
