// Mocks generated by Mockito 5.4.4 from annotations
// in absence_manager/test/features/absence/presentation/components/absence_list_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i10;

import 'package:absence_manager/features/absence/application/absence_cubit.dart'
    as _i2;
import 'package:absence_manager/features/absence/domain/absence.dart' as _i7;
import 'package:absence_manager/features/core/domain/failure.dart' as _i8;
import 'package:absence_manager/features/settings/application/settings_cubit.dart'
    as _i3;
import 'package:absence_manager/features/settings/domain/app_settings.dart'
    as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAbsenceState_0 extends _i1.SmartFake implements _i2.AbsenceState {
  _FakeAbsenceState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsState_1 extends _i1.SmartFake implements _i3.SettingsState {
  _FakeSettingsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppSettings_2 extends _i1.SmartFake implements _i4.AppSettings {
  _FakeAppSettings_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$SettingsStateCopyWith_3<$Res> extends _i1.SmartFake
    implements _i3.$SettingsStateCopyWith<$Res> {
  _Fake$SettingsStateCopyWith_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AbsenceCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsenceCubit extends _i1.Mock implements _i2.AbsenceCubit {
  @override
  _i2.AbsenceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAbsenceState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAbsenceState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AbsenceState);

  @override
  _i5.Stream<_i2.AbsenceState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.AbsenceState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.AbsenceState>.empty(),
      ) as _i5.Stream<_i2.AbsenceState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> fetchAbsencesWithMembers({
    int? page = 1,
    int? limit = 10,
    String? type,
    DateTime? date,
    bool? reset = false,
    bool? persist = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAbsencesWithMembers,
          [],
          {
            #page: page,
            #limit: limit,
            #type: type,
            #date: date,
            #reset: reset,
            #persist: persist,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void loadMoreAbsences() => super.noSuchMethod(
        Invocation.method(
          #loadMoreAbsences,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterAbsences({
    String? type,
    DateTime? date,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #filterAbsences,
          [],
          {
            #type: type,
            #date: date,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.AbsenceState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i6.Change<_i2.AbsenceState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AbsenceState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsenceState extends _i1.Mock implements _i2.AbsenceState {
  @override
  TResult when<TResult extends Object?>({
    required TResult Function()? loading,
    required TResult Function(
      List<_i7.Absence>,
      int,
      int,
      bool,
    )? loaded,
    required TResult Function(_i8.Failure)? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #when,
          [],
          {
            #loading: loading,
            #loaded: loaded,
            #error: error,
          },
        ),
        returnValue: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #when,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
            },
          ),
        ),
        returnValueForMissingStub: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #when,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
            },
          ),
        ),
      ) as TResult);

  @override
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? loading,
    TResult Function(
      List<_i7.Absence>,
      int,
      int,
      bool,
    )? loaded,
    TResult Function(_i8.Failure)? error,
    required TResult Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeWhen,
          [],
          {
            #loading: loading,
            #loaded: loaded,
            #error: error,
            #orElse: orElse,
          },
        ),
        returnValue: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #maybeWhen,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
              #orElse: orElse,
            },
          ),
        ),
        returnValueForMissingStub: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #maybeWhen,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
              #orElse: orElse,
            },
          ),
        ),
      ) as TResult);

  @override
  TResult map<TResult extends Object?>({
    required TResult Function(_i2.AbsenceLoading)? loading,
    required TResult Function(_i2.AbsenceLoaded)? loaded,
    required TResult Function(_i2.AbsenceError)? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [],
          {
            #loading: loading,
            #loaded: loaded,
            #error: error,
          },
        ),
        returnValue: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #map,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
            },
          ),
        ),
        returnValueForMissingStub: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #map,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
            },
          ),
        ),
      ) as TResult);

  @override
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_i2.AbsenceLoading)? loading,
    TResult Function(_i2.AbsenceLoaded)? loaded,
    TResult Function(_i2.AbsenceError)? error,
    required TResult Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeMap,
          [],
          {
            #loading: loading,
            #loaded: loaded,
            #error: error,
            #orElse: orElse,
          },
        ),
        returnValue: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #maybeMap,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
              #orElse: orElse,
            },
          ),
        ),
        returnValueForMissingStub: _i9.dummyValue<TResult>(
          this,
          Invocation.method(
            #maybeMap,
            [],
            {
              #loading: loading,
              #loaded: loaded,
              #error: error,
              #orElse: orElse,
            },
          ),
        ),
      ) as TResult);
}

/// A class which mocks [SettingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsCubit extends _i1.Mock implements _i3.SettingsCubit {
  @override
  _i3.SettingsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSettingsState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSettingsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.SettingsState);

  @override
  _i5.Stream<_i3.SettingsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.SettingsState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i3.SettingsState>.empty(),
      ) as _i5.Stream<_i3.SettingsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> changeTheme() => (super.noSuchMethod(
        Invocation.method(
          #changeTheme,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> changeLanguage(_i10.Locale? locale) => (super.noSuchMethod(
        Invocation.method(
          #changeLanguage,
          [locale],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateHapticFeedbackImpact(String? impact) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHapticFeedbackImpact,
          [impact],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> loadSettings() => (super.noSuchMethod(
        Invocation.method(
          #loadSettings,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void emit(_i3.SettingsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i6.Change<_i3.SettingsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [SettingsState].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsState extends _i1.Mock implements _i3.SettingsState {
  @override
  _i4.AppSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeAppSettings_2(
          this,
          Invocation.getter(#settings),
        ),
        returnValueForMissingStub: _FakeAppSettings_2(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i4.AppSettings);

  @override
  _i3.$SettingsStateCopyWith<_i3.SettingsState> get copyWith =>
      (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$SettingsStateCopyWith_3<_i3.SettingsState>(
          this,
          Invocation.getter(#copyWith),
        ),
        returnValueForMissingStub:
            _Fake$SettingsStateCopyWith_3<_i3.SettingsState>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i3.$SettingsStateCopyWith<_i3.SettingsState>);
}
